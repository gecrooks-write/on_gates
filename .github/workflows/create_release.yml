
# To create a new release, simple tag the master branch with a version, e.g. 'v0.7.1'
# PDF is built and uploaded as release resource

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v[0-9]*' # Push events to matching 'v[0-9]*', i.e. v1.0, v20.15.10, ect

name: Create Release

env:
  src_dir: 'on_gates_src'
  root_file: 'on_gates'
jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Checkout tags
        run: git fetch --unshallow --tags
      - name: Install latex
        run: sudo apt-get install -y texlive texlive-xetex texlive-fonts-extra latexmk
      - name: Compile LaTeX document
        run: cd ${{ env.src_dir }}; make build        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ env.src_dir }}/${{ env.root_file }}.pdf
          asset_name: ${{ env.root_file }}.pdf
          asset_content_type: application/pdf
